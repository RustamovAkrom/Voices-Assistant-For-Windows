import pvporcupine
import sounddevice as sd
import numpy as np
import logging
import time
import sys

logger = logging.getLogger("Porcupine")

class PorcupineListener:
    def __init__(self, keyword="jarvis", sensitivity=0.6):
        self.keyword = keyword.lower()
        self.sensitivity = sensitivity
        self.active = False
        self.handle = None
        self.stream = None

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            available = pvporcupine.KEYWORDS
            if self.keyword not in available:
                logger.warning(f"‚ö†Ô∏è –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{self.keyword}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. "
                               f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(available)}. "
                               f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'jarvis'.")
                self.keyword = "jarvis"

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Porcupine
            self.handle = pvporcupine.create(
                access_key="hJ3LqXL7Ef37ovssvvLNsC2EFDWOtIMaaPxKso6xzTtaySdopJTIFQ==",
                keywords=[self.keyword],
                sensitivities=[self.sensitivity]
            )

            logger.info(f"üéôÔ∏è Porcupine –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Å wake word: '{self.keyword}'")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Porcupine: {e}")
            sys.exit(1)

    def listen(self):
        """–°–ª—É—à–∞–µ—Ç wake word, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ"""
        self.active = True
        logger.info("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞...")

        try:
            def audio_callback(indata, frames, time_info, status):
                if status:
                    logger.warning(f"[AUDIO] {status}")
                pcm = (indata[:, 0] * 32768).astype(np.int16)
                result = self.handle.process(pcm)
                if result >= 0:
                    self.active = False
                    raise StopIteration  # –∑–∞–≤–µ—Ä—à–∏—Ç—å stream safely

            with sd.InputStream(
                samplerate=self.handle.sample_rate,
                channels=1,
                dtype="float32",
                callback=audio_callback
            ):
                while self.active:
                    time.sleep(0.01)

        except StopIteration:
            logger.info(f"‚úÖ Wake word '{self.keyword}' –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
            return False

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Porcupine –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        self.active = False
        if self.handle:
            self.handle.delete()
        logger.info("üõë Porcupine –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
