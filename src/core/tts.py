import os
import time
import torch
import requests
import sounddevice as sd
import numpy as np
from pathlib import Path
from functools import lru_cache

try:
    import pyttsx3
except ImportError:
    pyttsx3 = None


class HybridTTS:
    """
    –£–º–Ω—ã–π TTS-–¥–≤–∏–∂–æ–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - Silero (RU/EN/UZ) ‚Äî –æ—Ñ–ª–∞–π–Ω, –±—ã—Å—Ç—Ä—ã–π, —Å –∫—ç—à–µ–º
    - pyttsx3 ‚Äî —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –¥–≤–∏–∂–æ–∫
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –≤—ã–≤–æ–¥
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞/–≥–æ–ª–æ—Å–∞
    """

    def __init__(self, config: dict = None, debug: bool = False):
        self.debug = debug
        self.config = config or {}
        self.device = "cuda" if torch.cuda.is_available() else "cpu"

        self.models_dir = Path("data/models/tts")
        self.models_dir.mkdir(parents=True, exist_ok=True)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.voice_enabled = self.config.get("voice_enabled", True)
        self.default_lang = self.config.get("assistant", {}).get("default_language", "ru")
        self.current_lang = self.default_lang
        self.current_engine = "silero"
        self.current_speaker = self.config.get("voice_speaker", "baya")
        self.rate = self.config.get("speech_rate", 160)

        # –ú–æ–¥–µ–ª–∏
        self.supported_langs = {"ru": "v3_1_ru", "en": "v3_en", "uz": "v3_uz"}
        self.silero_speakers = {
            "ru": ["aidar", "baya", "kseniya", "xenia", "eugene"],
            "en": ["en_0", "en_1", "en_2"],
            "uz": ["uz_0", "uz_1", "uz_2"],
        }

        self.model = None
        self.engine = None
        self._init_tts_engines()

    # ------------------------------------------------------------
    # üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    # ------------------------------------------------------------
    def _init_tts_engines(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç Silero –∏ fallback-–¥–≤–∏–∂–æ–∫."""
        self._ensure_models_exist()
        self._load_model(self.current_lang)
        if pyttsx3:
            self.engine = pyttsx3.init()
            self.engine.setProperty("rate", self.rate)

    # ------------------------------------------------------------
    # üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
    # ------------------------------------------------------------
    def _ensure_models_exist(self):
        base_url = "https://models.silero.ai/models/tts"
        for lang, model_name in self.supported_langs.items():
            model_path = self.models_dir / f"{model_name}.pt"
            if not model_path.exists():
                print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é Silero –º–æ–¥–µ–ª—å –¥–ª—è {lang.upper()}...")
                try:
                    url = f"{base_url}/{lang}/{model_name}.pt"
                    r = requests.get(url, stream=True, timeout=20)
                    r.raise_for_status()
                    with open(model_path, "wb") as f:
                        f.write(r.content)
                    print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {lang.upper()}: {e}")

    # ------------------------------------------------------------
    # üß† –ó–∞–≥—Ä—É–∑–∫–∞ Silero –º–æ–¥–µ–ª–∏
    # ------------------------------------------------------------
    def _load_model(self, lang: str):
        try:
            model_name = self.supported_langs.get(lang, "v3_1_ru")
            local_path = self.models_dir / f"{model_name}.pt"
            self.model = torch.package.PackageImporter(local_path).load_pickle("tts_models", "model")
            self.model.to(self.device)
            if self.debug:
                print(f"üéôÔ∏è Silero TTS –∑–∞–≥—Ä—É–∂–µ–Ω –æ—Ñ–ª–∞–π–Ω –¥–ª—è —è–∑—ã–∫–∞ {lang.upper()}.")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {lang}: {e}")
            self.model = None

    # ------------------------------------------------------------
    # üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    # ------------------------------------------------------------
    def speak(self, text: str, lang: str = None, speaker: str = None, engine: str = None):
        if not self.voice_enabled or not text.strip():
            return

        lang = lang or self.current_lang
        speaker = speaker or self.current_speaker
        engine = engine or self.current_engine

        # –ü–æ–¥–±–æ—Ä –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        rate_adjust = max(0.8, min(1.2, 100 / (len(text) / 20 + 20)))

        try:
            if engine == "silero" and self.model:
                if speaker not in self.silero_speakers.get(lang, []):
                    speaker = self.silero_speakers[lang][0]

                if self.debug:
                    print(f"üó£Ô∏è [{lang.upper()}:{speaker}] ‚Üí {text}")

                audio = self._synthesize_silero(text, speaker)
                if isinstance(audio, torch.Tensor):
                    audio = audio.cpu().numpy()
                sd.play(audio, samplerate=48000)
                sd.wait()
                return

            # fallback ‚Üí pyttsx3
            if self.engine:
                self.engine.setProperty("rate", int(self.rate * rate_adjust))
                self.engine.say(text)
                self.engine.runAndWait()
        except Exception as e:
            print(f"‚ö†Ô∏è [TTS Error] {e}")

    # ------------------------------------------------------------
    # üîä Silero Synth (–∫—ç—à–∏—Ä—É–µ–º–∞—è)
    # ------------------------------------------------------------
    @lru_cache(maxsize=128)
    def _synthesize_silero(self, text: str, speaker: str):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç numpy-–º–∞—Å—Å–∏–≤ –≥–æ–ª–æ—Å–∞."""
        try:
            return self.model.apply_tts(
                text=text,
                speaker=speaker,
                sample_rate=48000,
                put_accent=True,
                put_yo=True
            )
        except Exception as e:
            print(f"[Silero synth error] {e}")
            return np.zeros(48000)  # —Ç–∏—à–∏–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    # ------------------------------------------------------------
    # ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    # ------------------------------------------------------------
    def set_language(self, lang: str):
        if lang not in self.supported_langs:
            print(f"‚ö†Ô∏è –Ø–∑—ã–∫ {lang} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        self.current_lang = lang
        self._load_model(lang)
        print(f"üåê –Ø–∑—ã–∫ TTS –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {lang.upper()}")

    def set_voice(self, speaker: str):
        self.current_speaker = speaker
        print(f"üé§ –ì–æ–ª–æ—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {speaker}")

    def set_engine(self, engine: str):
        if engine not in ("silero", "pyttsx3"):
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫: {engine}")
            return
        self.current_engine = engine
        print(f"‚öôÔ∏è –ü–µ—Ä–µ–∫–ª—é—á—ë–Ω TTS-–¥–≤–∏–∂–æ–∫: {engine}")

    # ------------------------------------------------------------
    # üß™ –¢–µ—Å—Ç
    # ------------------------------------------------------------
    def test(self):
        phrases = [
            ("–ü—Ä–∏–≤–µ—Ç, —è –∂–∏–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!", "ru", "baya"),
            ("Hello, I can speak English!", "en", "en_1"),
            ("Salom, men o'zbek tilida gapira olaman!", "uz", "uz_1"),
        ]
        for text, lang, voice in phrases:
            self.set_language(lang)
            self.speak(text, lang, voice)
            time.sleep(0.3)

# import os
# import torch
# import requests
# import sounddevice as sd
# from pathlib import Path
# import time

# try:
#     import pyttsx3
# except ImportError:
#     pyttsx3 = None


# class HybridTTS:
#     """
#     –ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π TTS:
#     - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Silero (–æ—Ñ–ª–∞–π–Ω, RU/EN/UZ)
#     - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç pyttsx3 (–æ—Ñ–ª–∞–π–Ω fallback)
#     - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª–∏
#     """

#     def __init__(self, config: dict = None):
#         self.config = config or {}
#         self.voice_enabled = self.config.get("voice_enabled", True)
#         self.default_lang = self.config.get("assistant", {}).get("default_language", "ru")
#         self.device = "cuda" if torch.cuda.is_available() else "cpu"
#         self.models_dir = Path("data/models/tts")
#         self.models_dir.mkdir(parents=True, exist_ok=True)

#         # –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
#         self.supported_langs = {
#             "ru": "v3_1_ru",
#             "en": "v3_en",
#             "uz": "v3_uz",
#         }

#         # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Silero
#         self.silero_speakers = {
#             "ru": ["aidar", "baya", "kseniya", "xenia", "eugene"],
#             "en": ["en_0", "en_1", "en_2"],
#             "uz": ["uz_0", "uz_1", "uz_2"],
#         }

#         self.current_lang = self.default_lang
#         self.current_speaker = self.config.get("voice_speaker", "baya")
#         self.current_engine = "silero"  # –∏–ª–∏ "pyttsx3"

#         # –ú–æ–¥–µ–ª—å Silero
#         self.model = None
#         self._ensure_models_exist()
#         self._load_model(self.current_lang)

#         # pyttsx3 fallback
#         self.engine = None
#         if pyttsx3 is not None:
#             self.engine = pyttsx3.init()
#             self.engine.setProperty("rate", self.config.get("speech_rate", 160))

#     # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ Silero –º–æ–¥–µ–ª–µ–π ===
#     def _ensure_models_exist(self):
#         base_url = "https://models.silero.ai/models/tts"
#         for lang, model_name in self.supported_langs.items():
#             model_path = self.models_dir / f"{model_name}.pt"
#             if not model_path.exists():
#                 print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞—é Silero –º–æ–¥–µ–ª—å –¥–ª—è {lang.upper()}...")
#                 try:
#                     url = f"{base_url}/{lang}/{model_name}.pt"
#                     r = requests.get(url, stream=True, timeout=15)
#                     with open(model_path, "wb") as f:
#                         f.write(r.content)
#                     print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
#                 except Exception as e:
#                     print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {lang.upper()}: {e}")

#     # === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Silero ===
#     def _load_model(self, lang: str):
#         try:
#             model_name = self.supported_langs.get(lang, "v3_1_ru")
#             self.model, _ = torch.hub.load(
#                 repo_or_dir="snakers4/silero-models",
#                 model="silero_tts",
#                 language=lang,
#                 speaker=model_name
#             )
#             self.model.to(self.device)
#             print(f"üéôÔ∏è Silero TTS –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ {lang.upper()}.")
#         except Exception as e:
#             print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Silero ({lang}): {e}")
#             self.model = None

#     # === –ì–æ–≤–æ—Ä–∏—Ç —Ç–µ–∫—Å—Ç ===
#     def speak(self, text: str, lang: str = None, speaker: str = None, engine: str = None):
#         if not self.voice_enabled or not text.strip():
#             print(f"üîä {text}")
#             return

#         lang = lang or self.current_lang
#         speaker = speaker or self.current_speaker
#         engine = engine or self.current_engine

#         # –µ—Å–ª–∏ Silero –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Üí fallback –Ω–∞ pyttsx3
#         if engine == "silero" and self.model:
#             try:
#                 if speaker not in self.silero_speakers.get(lang, []):
#                     speaker = self.silero_speakers[lang][0]
#                 print(f"üó£Ô∏è [{lang.upper()}:{speaker}] {text}")
#                 audio = self.model.apply_tts(
#                     text=text,
#                     speaker=speaker,
#                     sample_rate=48000,
#                     put_accent=True,
#                     put_yo=True,
#                 )
#                 sd.play(audio, 48000)
#                 sd.wait()
#                 return
#             except Exception as e:
#                 print(f"[Silero error] {e}")
#                 engine = "pyttsx3"

#         # fallback ‚Üí pyttsx3
#         if self.engine and engine == "pyttsx3":
#             print(f"üîä [pyttsx3] {text}")
#             try:
#                 self.engine.say(text)
#                 self.engine.runAndWait()
#             except Exception as e:
#                 print(f"[TTS fallback error] {e}")

#     # === –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ ===
#     def set_language(self, lang: str):
#         if lang not in self.supported_langs:
#             print(f"‚ö†Ô∏è –Ø–∑—ã–∫ {lang} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
#             return
#         self.current_lang = lang
#         self._load_model(lang)

#     # === –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞ ===
#     def set_voice(self, speaker: str):
#         self.current_speaker = speaker
#         print(f"üé§ –ì–æ–ª–æ—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {speaker}")

#     # === –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–≤–∏–∂–∫–∞ ===
#     def set_engine(self, engine: str):
#         if engine not in ("silero", "pyttsx3"):
#             print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫: {engine}")
#             return
#         self.current_engine = engine
#         print(f"‚öôÔ∏è TTS-–¥–≤–∏–∂–æ–∫: {engine}")

#     # === –¢–µ—Å—Ç ===
#     def test(self):
#         self.speak("–ü—Ä–∏–≤–µ—Ç, —è –æ—Ñ–ª–∞–π–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!", "ru", "baya")
#         self.speak("Hello, I can speak English!", "en", "en_1")
#         self.speak("Salom, men O'zbek tilida gapira olaman!", "uz", "uz_2")
