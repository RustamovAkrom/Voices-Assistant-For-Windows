import requests
import sounddevice as sd
from pathlib import Path
import logging

# --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
try:
    import soundfile as sf
except ImportError:
    sf = None

try:
    import pyttsx3
except ImportError:
    pyttsx3 = None

try:
    import torch
except ImportError:
    torch = None


class HybridTTS:
    """
    üí¨ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä —Ä–µ—á–∏ –¥–ª—è –æ—Ñ–ª–∞–π–Ω/–æ–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–æ–≤.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Silero (–µ—Å–ª–∏ torch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω) –∏ pyttsx3.
    –ú–æ–∂–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –∏–∑ media/audios.
    """

    def __init__(self, config: dict = None):
        self.logger = logging.getLogger("HybridTTS")
        self.config = config or {}
        self.voice_enabled = self.config.get("voice_enabled", True)
        self.default_lang = self.config.get("assistant", {}).get("default_language", "ru")

        # üß† –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è torch
        self.device = "cuda" if (
            torch is not None
            and torch.cuda.is_available()
            and self.config.get("silero", {}).get("use_cuda", True)
        ) else "cpu"

        # –ü—É—Ç–∏
        self.models_dir = Path("data/models/tts")
        self.models_dir.mkdir(parents=True, exist_ok=True)
        self.media_dir = Path("data/media/audios")

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
        self.supported_langs = {
            "ru": "v3_1_ru",
            "en": "v3_en",
            "uz": "v3_uz",
        }

        # –ì–æ–ª–æ—Å–∞ Silero
        self.silero_speakers = {
            "ru": ["aidar", "baya", "kseniya", "xenia", "eugene"],
            "en": ["en_0", "en_1", "en_2"],
            "uz": ["uz_0", "uz_1", "uz_2"],
        }

        # –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.current_lang = self.default_lang
        self.current_speaker = self.config.get("voice_speaker", "aidar")
        self.current_engine = self.config.get("voice_engine", "silero")
        self.model = None

        # pyttsx3 –≥–æ—Ç–æ–≤
        self.engine = None
        if pyttsx3 is not None:
            self.engine = pyttsx3.init()
            self.engine.setProperty("rate", self.config.get("voice_speed", 160))
            self.engine.setProperty("volume", self.config.get("voice_volume", 1.0))
            gender = self.config.get("voice_gender", "female").lower()
            for v in self.engine.getProperty("voices"):
                if gender in v.name.lower():
                    self.engine.setProperty("voice", v.id)
                    break

        # –ó–∞–≥—Ä—É–∑–∫–∞ Silero, –µ—Å–ª–∏ torch —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if torch is not None:
            try:
                self._ensure_models_exist()
                self._load_model(self.current_lang)
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Torch/Silero ({e}). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pyttsx3.")                
                self.model = None
                self.current_engine = "pyttsx3"
        else:
            self.logger.info("Torch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è pyttsx3.")
    # ----------------------------- #
    # üîπ Silero Model Management
    # ----------------------------- #

    def _ensure_models_exist(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç Silero –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        base_url = "https://models.silero.ai/models/tts"
        for lang, model_name in self.supported_langs.items():
            model_path = self.models_dir / f"{model_name}.pt"
            if not model_path.exists():
                self.logger.info(f"–°–∫–∞—á–∏–≤–∞—é Silero –º–æ–¥–µ–ª—å ({model_name}) –¥–ª—è {lang.upper()}...")                
                try:
                    url = f"{base_url}/{lang}/{model_name}.pt"
                    r = requests.get(url, stream=True, timeout=20)
                    with open(model_path, "wb") as f:
                        f.write(r.content)
                    self.logger.info(f"–ú–æ–¥–µ–ª—å {model_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")                
                except Exception as e:
                    self.logger.warning(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {model_name}: {e}")

    def _load_model(self, lang: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å Silero –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
        if torch is None:
            return
        try:
            model_name = self.supported_langs.get(lang, "v3_1_ru")
            self.model, _ = torch.hub.load(
                repo_or_dir="snakers4/silero-models",
                model="silero_tts",
                language=lang,
                speaker=model_name,
            )
            self.model.to(self.device)
            self.logger.info(f"Silero TTS –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ {lang.upper()}.")        
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Silero ({lang}): {e}")            
            self.model = None
            self.current_engine = "pyttsx3"

    # ----------------------------- #
    # üîπ Speech & Playback
    # ----------------------------- #

    def speak(self, text: str, lang: str = None, speaker: str = None, engine: str = None):
        """–ü—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Silero –∏–ª–∏ pyttsx3"""
        if not text or not self.voice_enabled:
            self.logger.debug(f"–¢–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –∏–ª–∏ –≥–æ–ª–æ—Å –æ—Ç–∫–ª—é—á—ë–Ω: '{text}'")
            return

        lang = lang or self.current_lang
        speaker = speaker or self.current_speaker
        engine = engine or self.current_engine

        # Silero
        if engine == "silero" and self.model and torch is not None:
            try:
                if speaker not in self.silero_speakers.get(lang, []):
                    speaker = self.silero_speakers[lang][0]
                self.logger.info(f"[SILERO] [{lang}:{speaker}] {text}")
                audio = self.model.apply_tts(
                    text=text,
                    speaker=speaker,
                    sample_rate=self.config.get("silero", {}).get("sample_rate", 48000),
                    put_accent=True,
                    put_yo=True,
                )
                sd.play(audio, self.config.get("silero", {}).get("sample_rate", 48000))
                sd.wait()
                return
            except Exception as e:
                self.logger.warning(f"[Silero error] {e}")
                engine = "pyttsx3"

        # pyttsx3 fallback
        if self.engine and engine == "pyttsx3":
            self.logger.info(f"[pyttsx3] {text}")
            try:
                self.engine.say(text)
                self.engine.runAndWait()
            except Exception as e:
                self.logger.warning(f"[TTS error] {e}")

        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ TTS
        elif not self.engine:
            print(f"üí≠ {text}")

    def play_audio_file(self, file_path: Path):
        """–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç WAV-—Ñ–∞–π–ª."""
        if not file_path.exists():
            print(f"‚ö†Ô∏è –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return
        if sf is None:
            print(f"‚ö†Ô∏è –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –Ω—É–∂–µ–Ω –º–æ–¥—É–ª—å soundfile.")
            return
        try:
            data, fs = sf.read(str(file_path))
            sd.play(data, fs)
            sd.wait()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ {file_path}: {e}")

    # ----------------------------- #
    # üîπ Settings
    # ----------------------------- #

    def set_language(self, lang: str):
        if lang not in self.supported_langs:
            print(f"‚ö†Ô∏è –Ø–∑—ã–∫ {lang} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return
        self.current_lang = lang
        if torch:
            self._load_model(lang)

    def set_voice(self, speaker: str):
        self.current_speaker = speaker
        print(f"üé§ –ì–æ–ª–æ—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {speaker}")

    def set_engine(self, engine: str):
        if engine not in ("silero", "pyttsx3"):
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–≤–∏–∂–æ–∫: {engine}")
            return
        self.current_engine = engine
        print(f"‚öôÔ∏è –î–≤–∏–∂–æ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {engine}")

    def test(self):
        """–¢–µ—Å—Ç –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –∏ —Ä–µ–∂–∏–º–æ–≤"""
        self.speak("–ü—Ä–∏–≤–µ—Ç, —è –æ—Ñ–ª–∞–π–Ω-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!", "ru")
        self.speak("Hello, I can speak English!", "en")
        self.speak("Salom, men O'zbek tilida gapira olaman!", "uz")
