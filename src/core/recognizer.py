import os
import sys
import json
import queue
import requests
import zipfile
import urllib.request
from io import BytesIO
from pathlib import Path
import speech_recognition as sr
from vosk import Model, KaldiRecognizer, SetLogLevel
import sounddevice as sd
from tqdm import tqdm
import tempfile
import shutil

class Recognizer:
    """
    Voice Recognizer for Voices Assistant
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Google Speech (–æ–Ω–ª–∞–π–Ω) –∏–ª–∏ Vosk (–æ—Ñ–ª–∞–π–Ω)
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —É–∑–±–µ–∫—Å–∫–∏–π —è–∑—ã–∫–∏
    - –°–∞–º —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏ –∫—ç—à–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏
    """

    def __init__(self, config):
        self.config = config
        self.default_lang = config.get("assistant", {}).get("default_language", "ru")
        self.models_dir = Path("data/models")
        self.models_dir.mkdir(parents=True, exist_ok=True)

        # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
        self.vosk_models = {
            "ru": self.models_dir / "vosk-model-small-ru-0.22",
            "en": self.models_dir / "vosk-model-small-en-us-0.15",
            "uz": self.models_dir / "vosk-model-small-uz-0.22",
        }

        # –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        self.vosk_urls = {
            "ru": "https://alphacephei.com/vosk/models/vosk-model-small-ru-0.22.zip",
            "en": "https://alphacephei.com/vosk/models/vosk-model-small-en-us-0.15.zip",
            "uz": "https://alphacephei.com/vosk/models/vosk-model-small-uz-0.22.zip",
        }

        SetLogLevel(-1)  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ Vosk

        self.online_available = self._check_internet()
        self._ensure_vosk_models()
        self.vosk_recognizers = self._load_vosk_recognizers()

        if self.online_available:
            self._init_online_recognition()
        else:
            self._init_offline_recognition()

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ===
    def _check_internet(self) -> bool:
        try:
            requests.get("https://www.google.com", timeout=3)
            return True
        except requests.RequestException:
            return False

    # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Speech ===
    def _init_online_recognition(self):
        self.mode = "online"
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        print("üåê –†–µ–∂–∏–º: ONLINE (Google Speech Recognition)")

    # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vosk ===
    def _init_offline_recognition(self):
        self.mode = "offline"
        print("‚öôÔ∏è –†–µ–∂–∏–º: OFFLINE (Vosk Speech Recognition)")

    # === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω –º–æ–¥–µ–ª–µ–π ===
    def _ensure_vosk_models(self):
        for lang, path in self.vosk_models.items():
            if not path.exists():
                if self.online_available:
                    print(f"üì¶ –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å –¥–ª—è {lang.upper()}...")
                    self._download_model(self.vosk_urls[lang])
                else:
                    print(f"‚ùå –ù–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è {lang.upper()} –∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
                    sys.exit(1)

    def _download_model(self, url):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª—å —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –∑–∞—â–∏—Ç–æ–π"""

        try:
            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            tmp_dir = tempfile.gettempdir()
            tmp_file = os.path.join(tmp_dir, "vosk_model.zip")

            print(f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å –∏–∑ {url}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            with requests.get(url, stream=True, timeout=30) as r:
                r.raise_for_status()
                total = int(r.headers.get("Content-Length", 0))

                if "text/html" in r.headers.get("Content-Type", ""):
                    print("‚ùå –û—à–∏–±–∫–∞: –≤–º–µ—Å—Ç–æ –∞—Ä—Ö–∏–≤–∞ –ø–æ–ª—É—á–µ–Ω HTML (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Å—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞).")
                    print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å —Å https://alphacephei.com/vosk/models")
                    sys.exit(1)

                with open(tmp_file, "wb") as f, tqdm(
                    total=total, unit="B", unit_scale=True, desc="üì¶ –ó–∞–≥—Ä—É–∑–∫–∞"
                ) as bar:
                    for chunk in r.iter_content(chunk_size=8192):
                        if chunk:
                            f.write(chunk)
                            bar.update(len(chunk))

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª ‚Äî —ç—Ç–æ zip
            if not zipfile.is_zipfile(tmp_file):
                print("‚ùå –û—à–∏–±–∫–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP-–∞—Ä—Ö–∏–≤–æ–º.")
                print("   –í–æ–∑–º–æ–∂–Ω–æ, Vosk –∏–∑–º–µ–Ω–∏–ª —Å—Å—ã–ª–∫—É –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                print("   –°–∫–∞—á–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é –º–æ–¥–µ–ª—å –∏ —Ä–∞—Å–ø–∞–∫—É–π—Ç–µ –≤ data/models.")
                sys.exit(1)

            # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞
            with zipfile.ZipFile(tmp_file, "r") as zf:
                zf.extractall(self.models_dir)

            print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            sys.exit(1)
        except zipfile.BadZipFile:
            print("‚ùå –ü–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–π ZIP-—Ñ–∞–π–ª. –£–¥–∞–ª–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É.")
            sys.exit(1)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            sys.exit(1)
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(tmp_file):
                os.remove(tmp_file)

    # === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –≤ –ø–∞–º—è—Ç—å ===
    def _load_vosk_recognizers(self):
        recognizers = {}
        for lang, path in self.vosk_models.items():
            if path.exists():
                try:
                    model = Model(str(path))
                    recognizers[lang] = KaldiRecognizer(model, 16000)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª –æ—Ñ–ª–∞–π–Ω –º–æ–¥–µ–ª—å: {lang.upper()}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {lang}: {e}")
        return recognizers

    # === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ ===
    def detect_language(self, text: str):
        text = text.lower()
        en_words = {"hello", "thanks", "how", "you", "open", "music"}
        uz_words = {"salom", "rahmat", "qandaysiz", "yaxshi"}
        ru_words = {"–ø—Ä–∏–≤–µ—Ç", "—Å–ø–∞—Å–∏–±–æ", "–æ—Ç–∫—Ä–æ–π", "–≤–∫–ª—é—á–∏", "–ø–æ—Å—Ç–∞–≤—å"}

        if any(word in text for word in en_words):
            return "en"
        elif any(word in text for word in uz_words):
            return "uz"
        elif any(word in text for word in ru_words):
            return "ru"
        return self.default_lang

    # === –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è ===
    def listen_text(self, multilang=True):
        if self.mode == "online":
            return self._listen_online(multilang)
        else:
            return self._listen_offline()

    # === –û–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º ===
    def _listen_online(self, multilang=True):
        try:
            with self.microphone as source:
                print("üéôÔ∏è –ì–æ–≤–æ—Ä–∏—Ç–µ (–æ–Ω–ª–∞–π–Ω)...")
                self.recognizer.adjust_for_ambient_noise(source, duration=0.5)
                audio = self.recognizer.listen(source, timeout=5, phrase_time_limit=7)

            lang_code = self.default_lang
            text = self.recognizer.recognize_google(audio, language=f"{lang_code}-{lang_code.upper()}")
            detected_lang = self.detect_language(text) if multilang else lang_code
            return text, detected_lang

        except sr.UnknownValueError:
            print("ü§î –ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ...")
            return "", self.default_lang
        except sr.RequestError:
            print("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–ø–∞–ª ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º.")
            self._init_offline_recognition()
            return self._listen_offline()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            return "", self.default_lang

    # === –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º ===
    def _listen_offline(self):
        lang = self.default_lang
        recognizer = self.vosk_recognizers.get(lang)
        if not recognizer:
            print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–ª—è {lang.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return "", lang

        print(f"üéôÔ∏è (Offline {lang.upper()}) –ì–æ–≤–æ—Ä–∏—Ç–µ...")

        q = queue.Queue()

        def callback(indata, frames, time_, status):
            q.put(bytes(indata))

        with sd.RawInputStream(samplerate=16000, blocksize=8000, dtype="int16",
                               channels=1, callback=callback):
            while True:
                data = q.get()
                if recognizer.AcceptWaveform(data):
                    result = json.loads(recognizer.Result())
                    text = result.get("text", "").strip()
                    if text:
                        detected_lang = self.detect_language(text)
                        return text, detected_lang

# import os
# import sys
# import json
# import queue
# import zipfile
# import urllib.request
# from io import BytesIO
# from pathlib import Path
# import sounddevice as sd
# import speech_recognition as sr
# from vosk import Model, KaldiRecognizer, SetLogLevel
# from langdetect import detect, DetectorFactory

# from src.core.config import MODELS_DIR, VOSK_MODEL_URLS, DETECT_LANGUAGE_WORDS, get_settings
# from src.utils.base import check_internet

# # –§–∏–∫—Å–∏—Ä—É–µ–º seed –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ langdetect:contentReference[oaicite:3]{index=3}
# DetectorFactory.seed = 0

# class Recognizer:
#     def __init__(self, config):
#         self.config = config
#         self.default_lang = config.get("assistant", {}).get("default_language", "ru")
#         self.models_dir = MODELS_DIR
#         self.models_dir.mkdir(parents=True, exist_ok=True)

#         self.vosk_models = {
#             "ru": self.models_dir / "vosk-model-small-ru-0.22",
#             "en": self.models_dir / "vosk-model-small-en-us-0.15",
#             "uz": self.models_dir / "vosk-model-small-uz-0.22",
#         }

#         SetLogLevel(-1)
#         self.online_available = check_internet()

#         # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ñ–ª–∞–π–Ω –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Ñ–ª–∞–π–Ω
#         if self.config.get("offline_mode", False):
#             self.online_available = False
#         # –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π VOSK
#         self._ensure_vosk_models()
#         self.vosk_recognizers = self._load_vosk_recognizers()

#         if self.online_available:
#             self._init_online_recognition()
#         else:
#             self._init_offline_recognition()

#     def _init_online_recognition(self):
#         self.mode = "online"
#         self.recognizer = sr.Recognizer()
#         self.microphone = sr.Microphone()
#         print("üåê –†–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ONLINE")

#     def _init_offline_recognition(self):
#         self.mode = "offline"
#         print("‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: OFFLINE")

#     def _ensure_vosk_models(self):
#         for lang, path in self.vosk_models.items():
#             if not path.exists():
#                 if self.online_available:
#                     print(f"üì¶ –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å VOSK –¥–ª—è {lang.upper()}...")
#                     try:
#                         self._download_and_extract(VOSK_MODEL_URLS[lang], self.models_dir)
#                         print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {path.name}")
#                     except Exception as e:
#                         print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {lang}: {e}")
#                         # –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
#                 else:
#                     print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–ª—è {lang.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞).")
#                     # –Ω–µ –≤—ã—Ö–æ–¥–∏–º, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

#     def _download_and_extract(self, url, target_dir):
#         with urllib.request.urlopen(url) as resp:
#             with zipfile.ZipFile(BytesIO(resp.read())) as zf:
#                 zf.extractall(self.models_dir)

#     def _load_vosk_recognizers(self):
#         recognizers = {}
#         for lang, path in self.vosk_models.items():
#             if path.exists():
#                 try:
#                     model = Model(str(path))
#                     recognizers[lang] = KaldiRecognizer(model, 16000)
#                     print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ–ª–∞–π–Ω-–º–æ–¥–µ–ª–∏ VOSK: {lang.upper()}")
#                 except Exception as e:
#                     print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ VOSK ({lang}): {e}")
#         return recognizers

#     def listen_text(self, multilang=True):
#         if self.mode == "online":
#             return self._listen_online(multilang)
#         else:
#             return self._listen_offline(multilang)

#     def _listen_online(self, multilang=True):
#         with self.microphone as source:
#             print("üéôÔ∏è (Online) –°–ª—É—à–∞—é...")
#             self.recognizer.adjust_for_ambient_noise(source, duration=0.3)
#             try:
#                 audio = self.recognizer.listen(source, timeout=5, phrase_time_limit=6)
#             except sr.WaitTimeoutError:
#                 return "", self.default_lang

#         try:
#             lang_code = self.default_lang
#             text = self.recognizer.recognize_google(
#                 audio, language=f"{lang_code}-{lang_code.upper()}"
#             )
#             detected_lang = self.detect_language(text) if multilang else lang_code
#             return text.strip(), detected_lang

#         except sr.UnknownValueError:
#             print("ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
#             return "", self.default_lang
#         except sr.RequestError:
#             print("‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ –æ—Ñ–ª–∞–π–Ω...")
#             if self.config.get("auto_switch_mode", False):
#                 self._init_offline_recognition()
#                 return self._listen_offline(multilang)
#             else:
#                 return "", self.default_lang

#     def _listen_offline(self, multilang=True):
#         lang = self.default_lang
#         recognizer = self.vosk_recognizers.get(lang)
#         if not recognizer:
#             print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å VOSK –¥–ª—è {lang.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#             return "", lang

#         print(f"üéôÔ∏è (Offline {lang.upper()}) –ì–æ–≤–æ—Ä–∏—Ç–µ...")
#         q = queue.Queue()

#         def callback(indata, frames, time_, status):
#             if status:
#                 print("‚ö†Ô∏è", status)
#             q.put(bytes(indata))

#         with sr.Microphone(sample_rate=16000) as source, sd.RawInputStream(
#             samplerate=16000,
#             blocksize=8000,
#             dtype="int16",
#             channels=1,
#             callback=callback
#         ):
#             while True:
#                 data = q.get()
#                 if recognizer.AcceptWaveform(data):
#                     result = json.loads(recognizer.Result())
#                     text = result.get("text", "").strip()
#                     if text:
#                         detected_lang = self.detect_language(text)
#                         return text, detected_lang

#     def detect_language(self, text: str):
#         text = text.strip().lower()
#         if not text:
#             return self.default_lang
#         try:
#             lang = detect(text)
#             if lang in ["ru", "en", "uz"]:
#                 return lang
#         except Exception:
#             pass
#         # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
#         for code, words in DETECT_LANGUAGE_WORDS.items():
#             if any(w in text for w in words):
#                 return code
#         return self.default_lang
