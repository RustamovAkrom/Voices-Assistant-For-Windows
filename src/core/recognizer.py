import os
import sys
import json
import queue
import requests
import speech_recognition as sr
from pathlib import Path
from vosk import Model, KaldiRecognizer, SetLogLevel


class Recognizer:
    def __init__(self, config):
        self.config = config
        self.default_lang = config.get("assistant", {}).get("default_language", "ru")
        self.models_dir = Path("data/models")
        self.models_dir.mkdir(parents=True, exist_ok=True)

        # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
        self.vosk_models = {
            "ru": str(self.models_dir / "vosk-model-small-ru-0.22"),
            "en": str(self.models_dir / "vosk-model-small-en-us-0.15"),
            "uz": str(self.models_dir / "vosk-model-small-uz-0.22"),
        }

        SetLogLevel(-1)  # –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ Vosk

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
        self.online_available = self.check_internet()

        # –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ñ–ª–∞–π–Ω –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã)
        self._ensure_vosk_models()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –≤ –ø–∞–º—è—Ç—å
        self.vosk_recognizers = self._load_vosk_recognizers()

        # –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—à–∞–µ–º ‚Äî –æ–Ω–ª–∞–π–Ω –∏–ª–∏ –æ—Ñ–ª–∞–π–Ω
        if self.online_available:
            self._init_online_recognition()
        else:
            self._init_offline_recognition()

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É ===
    def check_internet(self) -> bool:
        try:
            requests.get("https://www.google.com", timeout=3)
            return True
        except requests.RequestException:
            return False

    # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Speech Recognition ===
    def _init_online_recognition(self):
        self.mode = "online"
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()
        print("üåê –†–µ–∂–∏–º: ONLINE (Google Speech Recognition)")

    # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ ===
    def _init_offline_recognition(self):
        self.mode = "offline"
        print("‚öôÔ∏è –†–µ–∂–∏–º: OFFLINE (Vosk Speech Recognition)")

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ vosk –º–æ–¥–µ–ª–µ–π ===
    def _ensure_vosk_models(self):
        urls = {
            "ru": "https://alphacephei.com/vosk/models/vosk-model-small-ru-0.22.zip",
            "en": "https://alphacephei.com/vosk/models/vosk-model-small-en-us-0.15.zip",
            "uz": "https://alphacephei.com/vosk/models/vosk-model-small-uz-0.22.zip",
        }

        for lang, path in self.vosk_models.items():
            if not os.path.exists(path):
                if self.online_available:
                    print(f"üì¶ –°–∫–∞—á–∏–≤–∞—é –æ—Ñ–ª–∞–π–Ω –º–æ–¥–µ–ª—å –¥–ª—è {lang.upper()}...")
                    self._download_and_extract(urls[lang], path)
                else:
                    print(f"‚ùå –ù–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è {lang.upper()} –∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
                    print("   –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Jarvis –¥–ª—è –ø–µ—Ä–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
                    sys.exit(1)

    # === –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ ===
    def _download_and_extract(self, url, target_dir):
        import zipfile
        import urllib.request
        from io import BytesIO

        try:
            with urllib.request.urlopen(url) as resp:
                with zipfile.ZipFile(BytesIO(resp.read())) as zf:
                    zf.extractall(self.models_dir)
            print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {target_dir}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –º–æ–¥–µ–ª–∏ {target_dir}: {e}")
            sys.exit(1)

    # === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –≤ –ø–∞–º—è—Ç—å ===
    def _load_vosk_recognizers(self):
        recognizers = {}
        for lang, path in self.vosk_models.items():
            if os.path.exists(path):
                try:
                    model = Model(path)
                    recognizers[lang] = KaldiRecognizer(model, 16000)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –æ—Ñ–ª–∞–π–Ω –º–æ–¥–µ–ª—å: {lang.upper()}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ {lang}: {e}")
        return recognizers

    # === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ ===
    def detect_language(self, text: str):
        text = text.lower()
        en_words = {"hello", "thanks", "how", "you", "open", "music"}
        uz_words = {"salom", "rahmat", "qandaysiz", "yaxshi"}
        ru_words = {"–ø—Ä–∏–≤–µ—Ç", "—Å–ø–∞—Å–∏–±–æ", "–æ—Ç–∫—Ä–æ–π", "–≤–∫–ª—é—á–∏", "–ø–æ—Å—Ç–∞–≤—å"}

        if any(word in text for word in en_words):
            return "en"
        elif any(word in text for word in uz_words):
            return "uz"
        elif any(word in text for word in ru_words):
            return "ru"
        return self.default_lang

    # === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è ===
    def listen_text(self, multilang=True):
        if self.mode == "online":
            return self._listen_online(multilang)
        else:
            return self._listen_offline()

    # === –û–Ω–ª–∞–π–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ===
    def _listen_online(self, multilang=True):
        with self.microphone as source:
            print("üéôÔ∏è –°–ª—É—à–∞—é –≤–∞—Å (–æ–Ω–ª–∞–π–Ω)...")
            self.recognizer.adjust_for_ambient_noise(source, duration=0.5)
            audio = self.recognizer.listen(source, timeout=5, phrase_time_limit=7)

        try:
            lang_code = self.default_lang
            text = self.recognizer.recognize_google(audio, language=f"{lang_code}-{lang_code.upper()}")
            detected_lang = self.detect_language(text) if multilang else lang_code
            return text, detected_lang
        except sr.UnknownValueError:
            print("ü§î –ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ...")
            return "", self.default_lang
        except sr.RequestError:
            print("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–ø–∞–ª. –ü–µ—Ä–µ—Ö–æ–∂—É –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º.")
            self._init_offline_recognition()
            return self._listen_offline()

    # === –û—Ñ–ª–∞–π–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ===
    def _listen_offline(self):
        import sounddevice as sd

        lang = self.default_lang
        recognizer = self.vosk_recognizers.get(lang)
        if not recognizer:
            print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–ª—è {lang.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return "", lang

        print(f"üéôÔ∏è (Offline {lang.upper()}) –ì–æ–≤–æ—Ä–∏—Ç–µ...")

        q = queue.Queue()

        def callback(indata, frames, time_, status):
            q.put(bytes(indata))

        with sd.RawInputStream(samplerate=16000, blocksize=8000, dtype="int16",
                               channels=1, callback=callback):
            while True:
                data = q.get()
                if recognizer.AcceptWaveform(data):
                    result = json.loads(recognizer.Result())
                    text = result.get("text", "").strip()
                    if text:
                        detected_lang = self.detect_language(text)
                        return text, detected_lang

"""
| –§—É–Ω–∫—Ü–∏—è                 | –ß—Ç–æ –¥–µ–ª–∞–µ—Ç                                           |
| ----------------------- | ---------------------------------------------------- |
| `check_internet()`      | –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–µ—à–∞–µ—Ç, –∫–∞–∫–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–∏—Ç—å |
| `_ensure_vosk_models()` | –°–∫–∞—á–∏–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏                |
| `_listen_online()`      | –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Google Speech Recognition                 |
| `_listen_offline()`     | –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Vosk –∏ `sounddevice`                      |
| `detect_language()`     | –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è RU/EN/UZ                       |
| `default_language`      | –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ `config.yaml`                    |

"""