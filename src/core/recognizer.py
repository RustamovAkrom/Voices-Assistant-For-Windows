import os
import sys
import json
import queue
import requests
import zipfile
import sounddevice as sd
import numpy as np
import io
import tempfile
from pathlib import Path
from tqdm import tqdm
from vosk import Model, KaldiRecognizer, SetLogLevel
import speech_recognition as sr
from scipy.io.wavfile import write as wav_write


class Recognizer:
    """
    –ì–æ–ª–æ—Å–æ–≤–æ–π Recognizer –±–µ–∑ PyAudio:
    - –û–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ Google Speech
    - –û—Ñ—Ñ–ª–∞–π–Ω —á–µ—Ä–µ–∑ Vosk
    - –†–∞–±–æ—Ç–∞–µ—Ç —Å sounddevice
    """

    def __init__(self, config):
        self.config = config
        self.default_lang = config.get("assistant", {}).get("default_language", "ru")
        self.models_dir = Path("data/models")
        self.models_dir.mkdir(parents=True, exist_ok=True)

        # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
        self.vosk_models = {
            "ru": self.models_dir / "vosk-model-small-ru-0.22",
            "en": self.models_dir / "vosk-model-small-en-us-0.15",
            "uz": self.models_dir / "vosk-model-small-uz-0.22",
        }

        # –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        self.vosk_urls = {
            "ru": "https://alphacephei.com/vosk/models/vosk-model-small-ru-0.22.zip",
            "en": "https://alphacephei.com/vosk/models/vosk-model-small-en-us-0.15.zip",
            "uz": "https://alphacephei.com/vosk/models/vosk-model-small-uz-0.22.zip",
        }

        SetLogLevel(-1)
        self.online_available = self._check_internet()
        self._ensure_vosk_models()
        self.vosk_recognizers = self._load_vosk_recognizers()

        if self.online_available:
            self.mode = "online"
            print("üåê –†–µ–∂–∏–º: ONLINE (Google Speech Recognition)")
        else:
            self.mode = "offline"
            print("‚öôÔ∏è –†–µ–∂–∏–º: OFFLINE (Vosk Speech Recognition)")

    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ===
    def _check_internet(self):
        try:
            requests.get("https://www.google.com", timeout=3)
            return True
        except requests.RequestException:
            return False

    # === –°–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª–∏ Vosk ===
    def _ensure_vosk_models(self):
        for lang, path in self.vosk_models.items():
            if not path.exists():
                if self.online_available:
                    print(f"üì¶ –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å –¥–ª—è {lang.upper()}...")
                    self._download_model(self.vosk_urls[lang])
                else:
                    print(f"‚ùå –ù–µ—Ç –º–æ–¥–µ–ª–∏ –¥–ª—è {lang.upper()} –∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
                    sys.exit(1)

    def _download_model(self, url):
        tmp_dir = tempfile.gettempdir()
        tmp_file = os.path.join(tmp_dir, "vosk_model.zip")
        print(f"‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å –∏–∑ {url}")

        with requests.get(url, stream=True, timeout=30) as r:
            r.raise_for_status()
            total = int(r.headers.get("Content-Length", 0))
            with open(tmp_file, "wb") as f, tqdm(
                total=total, unit="B", unit_scale=True, desc="üì¶ –ó–∞–≥—Ä—É–∑–∫–∞"
            ) as bar:
                for chunk in r.iter_content(chunk_size=8192):
                    if chunk:
                        f.write(chunk)
                        bar.update(len(chunk))

        if not zipfile.is_zipfile(tmp_file):
            print("‚ùå –û—à–∏–±–∫–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ ZIP.")
            sys.exit(1)

        with zipfile.ZipFile(tmp_file, "r") as zf:
            zf.extractall(self.models_dir)

        os.remove(tmp_file)
        print("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

    # === –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ===
    def _load_vosk_recognizers(self):
        recs = {}
        for lang, path in self.vosk_models.items():
            if path.exists():
                try:
                    model = Model(str(path))
                    recs[lang] = KaldiRecognizer(model, 16000)
                    print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∏–ª –æ—Ñ–ª–∞–π–Ω –º–æ–¥–µ–ª—å: {lang.upper()}")
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {lang}: {e}")
        return recs

    # === –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ ===
    def listen_text(self, multilang=True):
        if self.mode == "online":
            return self._listen_online(multilang)
        else:
            return self._listen_offline()

    # === –û–Ω–ª–∞–π–Ω —á–µ—Ä–µ–∑ sounddevice + Google Speech ===
    def _listen_online(self, multilang=True):
        print("üéôÔ∏è (Online) –ì–æ–≤–æ—Ä–∏—Ç–µ...")

        samplerate = 16000
        duration = 5  # —Å–µ–∫—É–Ω–¥ –∑–∞–ø–∏—Å–∏

        audio_data = sd.rec(
            int(samplerate * duration),
            samplerate=samplerate,
            channels=1,
            dtype="int16"
        )
        sd.wait()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ AudioData (–¥–ª—è speech_recognition)
        wav_bytes = io.BytesIO()
        wav_write(wav_bytes, samplerate, audio_data)
        wav_bytes.seek(0)

        r = sr.Recognizer()
        with sr.AudioFile(wav_bytes) as source:
            audio = r.record(source)

        try:
            lang_code = self.default_lang
            text = r.recognize_google(audio, language=f"{lang_code}-{lang_code.upper()}")
            detected_lang = self.detect_language(text) if multilang else lang_code
            print(f"üó£Ô∏è {text}")
            return text, detected_lang
        except sr.UnknownValueError:
            print("ü§î –ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ...")
            return "", self.default_lang
        except sr.RequestError:
            print("‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–ø–∞–ª ‚Äî –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º.")
            self.mode = "offline"
            return self._listen_offline()

    # === –û—Ñ–ª–∞–π–Ω —á–µ—Ä–µ–∑ Vosk ===
    def _listen_offline(self):
        lang = self.default_lang
        recognizer = self.vosk_recognizers.get(lang)
        if not recognizer:
            print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–ª—è {lang.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return "", lang

        print(f"üéôÔ∏è (Offline {lang.upper()}) –ì–æ–≤–æ—Ä–∏—Ç–µ...")

        q = queue.Queue()

        def callback(indata, frames, time_, status):
            q.put(bytes(indata))

        with sd.RawInputStream(samplerate=16000, blocksize=8000,
                               dtype="int16", channels=1, callback=callback):
            while True:
                data = q.get()
                if recognizer.AcceptWaveform(data):
                    result = json.loads(recognizer.Result())
                    text = result.get("text", "").strip()
                    if text:
                        detected_lang = self.detect_language(text)
                        print(f"üó£Ô∏è {text}")
                        return text, detected_lang

    # === –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ ===
    def detect_language(self, text):
        text = text.lower()
        en_words = {"hello", "thanks", "how", "you", "open", "music"}
        uz_words = {"salom", "rahmat", "qandaysiz", "yaxshi"}
        ru_words = {"–ø—Ä–∏–≤–µ—Ç", "—Å–ø–∞—Å–∏–±–æ", "–æ—Ç–∫—Ä–æ–π", "–≤–∫–ª—é—á–∏", "–ø–æ—Å—Ç–∞–≤—å"}

        if any(w in text for w in en_words):
            return "en"
        elif any(w in text for w in uz_words):
            return "uz"
        elif any(w in text for w in ru_words):
            return "ru"
        return self.default_lang

# import os
# import sys
# import json
# import queue
# import zipfile
# import urllib.request
# from io import BytesIO
# from pathlib import Path
# import sounddevice as sd
# import speech_recognition as sr
# from vosk import Model, KaldiRecognizer, SetLogLevel
# from langdetect import detect, DetectorFactory

# from src.core.config import MODELS_DIR, VOSK_MODEL_URLS, DETECT_LANGUAGE_WORDS, get_settings
# from src.utils.base import check_internet

# # –§–∏–∫—Å–∏—Ä—É–µ–º seed –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ langdetect:contentReference[oaicite:3]{index=3}
# DetectorFactory.seed = 0

# class Recognizer:
#     def __init__(self, config):
#         self.config = config
#         self.default_lang = config.get("assistant", {}).get("default_language", "ru")
#         self.models_dir = MODELS_DIR
#         self.models_dir.mkdir(parents=True, exist_ok=True)

#         self.vosk_models = {
#             "ru": self.models_dir / "vosk-model-small-ru-0.22",
#             "en": self.models_dir / "vosk-model-small-en-us-0.15",
#             "uz": self.models_dir / "vosk-model-small-uz-0.22",
#         }

#         SetLogLevel(-1)
#         self.online_available = check_internet()

#         # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ—Ñ–ª–∞–π–Ω –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ—Ñ–ª–∞–π–Ω
#         if self.config.get("offline_mode", False):
#             self.online_available = False
#         # –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π VOSK
#         self._ensure_vosk_models()
#         self.vosk_recognizers = self._load_vosk_recognizers()

#         if self.online_available:
#             self._init_online_recognition()
#         else:
#             self._init_offline_recognition()

#     def _init_online_recognition(self):
#         self.mode = "online"
#         self.recognizer = sr.Recognizer()
#         self.microphone = sr.Microphone()
#         print("üåê –†–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ONLINE")

#     def _init_offline_recognition(self):
#         self.mode = "offline"
#         print("‚öôÔ∏è –†–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: OFFLINE")

#     def _ensure_vosk_models(self):
#         for lang, path in self.vosk_models.items():
#             if not path.exists():
#                 if self.online_available:
#                     print(f"üì¶ –°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å VOSK –¥–ª—è {lang.upper()}...")
#                     try:
#                         self._download_and_extract(VOSK_MODEL_URLS[lang], self.models_dir)
#                         print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {path.name}")
#                     except Exception as e:
#                         print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ {lang}: {e}")
#                         # –Ω–µ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
#                 else:
#                     print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –¥–ª—è {lang.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —è–∑—ã–∫–∞).")
#                     # –Ω–µ –≤—ã—Ö–æ–¥–∏–º, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

#     def _download_and_extract(self, url, target_dir):
#         with urllib.request.urlopen(url) as resp:
#             with zipfile.ZipFile(BytesIO(resp.read())) as zf:
#                 zf.extractall(self.models_dir)

#     def _load_vosk_recognizers(self):
#         recognizers = {}
#         for lang, path in self.vosk_models.items():
#             if path.exists():
#                 try:
#                     model = Model(str(path))
#                     recognizers[lang] = KaldiRecognizer(model, 16000)
#                     print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ñ–ª–∞–π–Ω-–º–æ–¥–µ–ª–∏ VOSK: {lang.upper()}")
#                 except Exception as e:
#                     print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ VOSK ({lang}): {e}")
#         return recognizers

#     def listen_text(self, multilang=True):
#         if self.mode == "online":
#             return self._listen_online(multilang)
#         else:
#             return self._listen_offline(multilang)

#     def _listen_online(self, multilang=True):
#         with self.microphone as source:
#             print("üéôÔ∏è (Online) –°–ª—É—à–∞—é...")
#             self.recognizer.adjust_for_ambient_noise(source, duration=0.3)
#             try:
#                 audio = self.recognizer.listen(source, timeout=5, phrase_time_limit=6)
#             except sr.WaitTimeoutError:
#                 return "", self.default_lang

#         try:
#             lang_code = self.default_lang
#             text = self.recognizer.recognize_google(
#                 audio, language=f"{lang_code}-{lang_code.upper()}"
#             )
#             detected_lang = self.detect_language(text) if multilang else lang_code
#             return text.strip(), detected_lang

#         except sr.UnknownValueError:
#             print("ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.")
#             return "", self.default_lang
#         except sr.RequestError:
#             print("‚ö†Ô∏è –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ –æ—Ñ–ª–∞–π–Ω...")
#             if self.config.get("auto_switch_mode", False):
#                 self._init_offline_recognition()
#                 return self._listen_offline(multilang)
#             else:
#                 return "", self.default_lang

#     def _listen_offline(self, multilang=True):
#         lang = self.default_lang
#         recognizer = self.vosk_recognizers.get(lang)
#         if not recognizer:
#             print(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å VOSK –¥–ª—è {lang.upper()} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
#             return "", lang

#         print(f"üéôÔ∏è (Offline {lang.upper()}) –ì–æ–≤–æ—Ä–∏—Ç–µ...")
#         q = queue.Queue()

#         def callback(indata, frames, time_, status):
#             if status:
#                 print("‚ö†Ô∏è", status)
#             q.put(bytes(indata))

#         with sr.Microphone(sample_rate=16000) as source, sd.RawInputStream(
#             samplerate=16000,
#             blocksize=8000,
#             dtype="int16",
#             channels=1,
#             callback=callback
#         ):
#             while True:
#                 data = q.get()
#                 if recognizer.AcceptWaveform(data):
#                     result = json.loads(recognizer.Result())
#                     text = result.get("text", "").strip()
#                     if text:
#                         detected_lang = self.detect_language(text)
#                         return text, detected_lang

#     def detect_language(self, text: str):
#         text = text.strip().lower()
#         if not text:
#             return self.default_lang
#         try:
#             lang = detect(text)
#             if lang in ["ru", "en", "uz"]:
#                 return lang
#         except Exception:
#             pass
#         # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
#         for code, words in DETECT_LANGUAGE_WORDS.items():
#             if any(w in text for w in words):
#                 return code
#         return self.default_lang
