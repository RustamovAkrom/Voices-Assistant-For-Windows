import importlib
import os
from pathlib import Path
from functools import lru_cache


class SkillManager:
    """
    –ì–∏–±–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–≤—ã–∫–æ–≤.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ src/skills.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —è–∑—ã–∫–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    """

    def __init__(self, skills_path: str = "src/skills", debug: bool = True, context: dict = None):
        self.skills_path = Path(skills_path)
        self.debug = debug
        self.skills = {}
        self.context = context or {}
        self.load_all_skills()

    def log(self, message: str):
        if self.debug:
            print(f"[DEBUG SkillManager] {message}")

    # ========================= –ó–ê–ì–†–£–ó–ö–ê –ù–ê–í–´–ö–û–í =========================

    def load_all_skills(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ src/skills."""
        self.skills.clear()

        if not self.skills_path.exists():
            self.log(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–≤—ã–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.skills_path}")
            return

        for file in os.listdir(self.skills_path):
            if file.endswith(".py") and file != "__init__.py":
                name = file[:-3]
                module_name = f"src.skills.{name}"

                try:
                    module = importlib.import_module(module_name)
                    importlib.reload(module)
                    self.skills[name] = module
                    self.log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –Ω–∞–≤—ã–∫: {name}")
                except Exception as e:
                    print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–≤—ã–∫ '{name}': {e}")

    def reload(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞–≤—ã–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤)."""
        self.load_all_skills()
        self.log("üîÑ –í—Å–µ –Ω–∞–≤—ã–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    # ========================= –í–´–ü–û–õ–ù–ï–ù–ò–ï –î–ï–ô–°–¢–í–ò–ô =========================

    def execute(self, action: str, text: str = None):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 'system.shutdown' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 'shutdown').
        –ü–µ—Ä–µ–¥–∞—ë—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: text, language, context, args, kwargs.
        """
        if not action:
            return "‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ."
        
        if not text:
            return "‚ö†Ô∏è Text not found in SkillManager!"

        # –°–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç


        def _call_function(fn):
            context = {
                "action": action, 
                "text": text,
                **self.context,  # –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∫–æ–Ω—Ñ–∏–≥, –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –º–∏–∫—Ä–æ—Ñ–æ–Ω –∏ —Ç.–ø.)
            }
            try:
                return fn(**context)

            except Exception as e:
                return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ '{action}': {e}"

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ module.function
        if "." in action:
            mod, func = action.split(".", 1)
            module = self.skills.get(mod)

            if not module:
                return f"‚ùå –ù–∞–≤—ã–∫ '{mod}' –Ω–µ –Ω–∞–π–¥–µ–Ω."

            fn = getattr(module, func, None)
            if not callable(fn):
                return f"‚ö†Ô∏è –í '{mod}' –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ '{func}'."

            return _call_function(fn)

        # –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –º–æ–¥—É–ª—è–º
        for name, module in self.skills.items():
            fn = getattr(module, action, None)
            if callable(fn):
                return _call_function(fn)

        return f"‚ùå –î–µ–π—Å—Ç–≤–∏–µ '{action}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    # ========================= –°–ü–†–ê–í–ö–ê =========================

    @lru_cache(maxsize=32)
    def list_skills(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤."""
        return list(self.skills.keys())
