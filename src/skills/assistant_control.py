import yaml
import sys
from pathlib import Path

def change_language(*args, **kwargs):
    """
    üåê –ú–µ–Ω—è–µ—Ç —è–∑—ã–∫ Jarvis —á–µ—Ä–µ–∑ *args –∏ **kwargs.

    –í kwargs –º–æ–≥—É—Ç –±—ã—Ç—å:
      - query: –∏—Å—Ö–æ–¥–Ω–∞—è –≥–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
      - dataset: —Å–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ (–∏–∑ commands.yaml)
      - context: —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (config, –ø—É—Ç–∏, —è–∑—ã–∫, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)
    """

    dataset = kwargs.get("dataset", {})
    query = kwargs.get("query", "")
    context = kwargs.get("context", {})

    # üéØ –ò—â–µ–º —è–∑—ã–∫ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∏–ª–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    lang_code = None
    if args:
        for arg in args:
            if isinstance(arg, str):
                lang_code = arg
                break

    if not lang_code:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞–ø—Ä—è–º—É—é ‚Äî –ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ query
        text = query.lower()
        if "–∞–Ω–≥–ª–∏–π" in text or "english" in text:
            lang_code = "en-US"
        elif "—Ä—É—Å—Å–∫" in text or "russian" in text:
            lang_code = "ru-RU"
        elif "—É–∑–±–µ–∫" in text or "uzbek" in text:
            lang_code = "uz-UZ"

    if not lang_code:
        return "‚ö†Ô∏è –ù–µ –ø–æ–Ω—è–ª, –Ω–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è."

    # üìÇ –ë–µ—Ä—ë–º –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
    config_path = Path(context.get("config_path", "data/config.yaml"))

    try:
        with open(config_path, "r", encoding="utf-8") as f:
            config = yaml.safe_load(f) or {}

        config["assistant"]["default_language"] = lang_code

        with open(config_path, "w", encoding="utf-8") as f:
            yaml.dump(config, f, allow_unicode=True)

        print(f"‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {lang_code}")
        return f"‚úÖ –Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {lang_code}"

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {e}"


def shutdown_assistant(*args, **kwargs):
    """
    üõë –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É Jarvis.

    –í kwargs –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å:
      - context: { "workers": [...], "assistant_name": str }
      - query: –∏—Å—Ö–æ–¥–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    context = kwargs.get("context", {})
    query = kwargs.get("query", "")
    assistant_name = context.get("assistant_name", "Jarvis")
    workers = context.get("workers", [])

    print(f"üß† {assistant_name} –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {query}")
    print("üîª –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

    for w in workers:
        if hasattr(w, "stop"):
            try:
                w.stop()
                print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ç–æ–∫: {getattr(w, 'name', 'Unnamed')}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫: {e}")

    print(f"üëã {assistant_name} –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
    sys.exit(0)
