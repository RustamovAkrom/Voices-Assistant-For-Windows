import re
from pathlib import Path
import yaml
import sys

from src.core.config import get_settings, DEFAULT_CONFIG_PATH

def _detect_lang_from_text(text: str):
    if not text:
        return None
    t = text.lower()
    mapping = {
        "—Ä—É—Å—Å–∫–∏–π": "ru", "—Ä—É—Å—Å–∫–∏": "ru", "russian": "ru", "ru": "ru", "ru-ru": "ru",
        "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π": "en", "–∞–Ω–≥–ª–∏—Å–∫–∏–π": "en", "english": "en", "en": "en", "en-us": "en",
        "—É–∑–±–µ–∫—Å–∫–∏–π": "uz", "uzbek": "uz", "uz": "uz"
    }
    for token in re.split(r"[\s,\.]+", t):
        if token in mapping:
            return mapping[token]
    m = re.search(r"\b([a-z]{2})(?:[-_][A-Z]{2})?\b", t)
    if m:
        code = m.group(1).lower()
        return mapping.get(code, code)
    return None

def _persist_settings(settings):
    """
    –ï—Å–ª–∏ get_settings() –≤–µ—Ä–Ω—É–ª dict –∏ —É –Ω–∞—Å –µ—Å—Ç—å DEFAULT_CONFIG_PATH ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º.
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏.
    """
    try:
        if isinstance(settings, dict) and DEFAULT_CONFIG_PATH:
            DEFAULT_CONFIG_PATH.write_text(yaml.safe_dump(settings, allow_unicode=True))
    except Exception:
        pass

def change_language(*args, **kwargs):
    """
    Skills handler for 'change language' command.
    Uses central settings (get_settings()) instead of manual file access.
    Expects kwargs.get('text') with user phrase.
    Optionally in kwargs: recognizer, tts ‚Äî will be updated if present.
    Returns localized confirmation string.
    """
    text = kwargs.get("text", "") or " ".join(str(a) for a in args if isinstance(a, str))
    lang = _detect_lang_from_text(text)
    if not lang:
        return {
            "ru": "–ö–∞–∫–æ–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (—Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, —É–∑–±–µ–∫—Å–∫–∏–π)",
            "en": "Which language to set? (russian, english, uzbek)",
            "uz": "Qaysi tilni o'rnatish kerak? (ruscha, inglizcha, o'zbekcha)"
        }.get(kwargs.get("lang", "ru"), "–ö–∞–∫–æ–π —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?")

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = None
    try:
        settings = get_settings() or {}
    except Exception:
        settings = {}

    # –û–±–Ω–æ–≤–ª—è–µ–º runtime-–æ–±—ä–µ–∫—Ç—ã, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    recognizer = kwargs.get("recognizer")
    tts = kwargs.get("tts")

    try:
        if recognizer and hasattr(recognizer, "set_language"):
            recognizer.set_language(lang)
        if tts and hasattr(tts, "set_language"):
            tts.set_language(lang)
    except Exception:
        pass

    # –û–±–Ω–æ–≤–ª—è–µ–º settings –≤ –ø–∞–º—è—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    try:
        if isinstance(settings, dict):
            settings.setdefault("assistant", {})["default_language"] = lang
            _persist_settings(settings)
        else:
            # –µ—Å–ª–∏ get_settings() –≤–µ—Ä–Ω—É–ª –æ–±—ä–µ–∫—Ç (dataclass/Settings) ‚Äî –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ
            try:
                setattr(settings, "assistant", getattr(settings, "assistant", {}))
                if isinstance(settings.assistant, dict):
                    settings.assistant["default_language"] = lang
                _persist_settings(getattr(settings, "__dict__", None) or settings)
            except Exception:
                pass
    except Exception:
        pass

    messages = {
        "ru": "–Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.",
        "en": "Language updated.",
        "uz": "Til yangilandi."
    }
    return messages.get(lang, messages["ru"])
# ...existing code...

def shutdown_assistant(*args, **kwargs):
    """
    üõë –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É Jarvis.

    –í kwargs –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å:
      - context: { "workers": [...], "assistant_name": str }
      - query: –∏—Å—Ö–æ–¥–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    context = kwargs.get("context", {})
    query = kwargs.get("query", "")
    assistant_name = context.get("assistant_name", "Jarvis")
    workers = context.get("workers", [])

    print(f"üß† {assistant_name} –ø–æ–ª—É—á–∏–ª –∫–æ–º–∞–Ω–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {query}")
    print("üîª –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")

    for w in workers:
        if hasattr(w, "stop"):
            try:
                w.stop()
                print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Ç–æ–∫: {getattr(w, 'name', 'Unnamed')}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫: {e}")

    print(f"üëã {assistant_name} –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")
    sys.exit(0)
