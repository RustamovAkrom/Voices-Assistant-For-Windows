import os
import requests
from typing import Optional

class GeminiSkill:
    """
    –ù–∞–≤—ã–∫ –æ–±—â–µ–Ω–∏—è —Å AI (Google Gemini)
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª—é—á–∞ –∏ —Å–µ—Ç–∏.
    """

    def __init__(self, api_key: Optional[str] = None, enabled: bool = True, debug: bool = False):
        self.api_key = api_key or os.getenv("GEMINI_API_KEY")
        self.enabled = enabled and bool(self.api_key)
        self.debug = debug
        self.endpoint = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent"

    def ask(self, prompt: str, lang: str = "ru") -> str:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ Gemini –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
        –ï—Å–ª–∏ API –≤—ã–∫–ª—é—á–µ–Ω, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á –∏–ª–∏ –Ω–µ—Ç —Å–µ—Ç–∏ ‚Äî –≤—ã–¥–∞—ë—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        """
        if not self.enabled:
            if self.debug:
                print("[GeminiSkill] AI –º–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á—ë–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
            return "ü§ñ AI-–º–æ–¥—É–ª—å —Å–µ–π—á–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω."

        if not self.api_key:
            if self.debug:
                print("[GeminiSkill] API –∫–ª—é—á Gemini –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á Gemini API. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."

        headers = {"Content-Type": "application/json"}
        params = {"key": self.api_key}
        data = {
            "contents": [
                {"parts": [{"text": prompt}]}
            ]
        }

        try:
            response = requests.post(
                self.endpoint,
                headers=headers,
                params=params,
                json=data,
                timeout=10
            )

            if response.status_code == 200:
                result = response.json()
                text = (
                    result.get("candidates", [{}])[0]
                    .get("content", {})
                    .get("parts", [{}])[0]
                    .get("text", "")
                    .strip()
                )
                if not text:
                    text = "ü§ñ –ò–∑–≤–∏–Ω–∏, —è –Ω–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –æ—Ç–≤–µ—Ç."
                if self.debug:
                    print(f"[GeminiSkill] ‚úÖ Response: {text}")
                return text

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ API-–æ—à–∏–±–æ–∫
            if self.debug:
                print(f"[GeminiSkill] ‚ùå API Error {response.status_code}: {response.text}")
            return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        except requests.exceptions.Timeout:
            if self.debug:
                print("[GeminiSkill] ‚è≥ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API.")
            return "‚ö†Ô∏è AI –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è."
        except requests.exceptions.ConnectionError:
            if self.debug:
                print("[GeminiSkill] üåê –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏.")
            return "‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏. –†–∞–±–æ—Ç–∞—é –æ—Ñ–ª–∞–π–Ω."
        except Exception as e:
            if self.debug:
                print(f"[GeminiSkill] ‚ùó –û—à–∏–±–∫–∞: {e}")
            return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI."
