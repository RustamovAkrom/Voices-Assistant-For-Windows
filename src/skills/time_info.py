from datetime import datetime


# === üî¢ –ß–∏—Å–ª–∞ –ø—Ä–æ–ø–∏—Å—å—é ===
def number_to_words_ru(num: int) -> str:
    ones = [
        "–Ω–æ–ª—å", "–æ–¥–∏–Ω", "–¥–≤–∞", "—Ç—Ä–∏", "—á–µ—Ç—ã—Ä–µ", "–ø—è—Ç—å",
        "—à–µ—Å—Ç—å", "—Å–µ–º—å", "–≤–æ—Å–µ–º—å", "–¥–µ–≤—è—Ç—å"
    ]
    teens = [
        "–¥–µ—Å—è—Ç—å", "–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å", "–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å", "—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å", "—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å",
        "–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å", "—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å", "—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å", "–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å", "–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å"
    ]
    tens = ["", "", "–¥–≤–∞–¥—Ü–∞—Ç—å", "—Ç—Ä–∏–¥—Ü–∞—Ç—å", "—Å–æ—Ä–æ–∫", "–ø—è—Ç—å–¥–µ—Å—è—Ç"]

    if num < 10:
        return ones[num]
    elif num < 20:
        return teens[num - 10]
    elif num < 60:
        ten, one = divmod(num, 10)
        return f"{tens[ten]} {ones[one]}".strip()
    return str(num)


def number_to_words_en(num: int) -> str:
    ones = [
        "zero", "one", "two", "three", "four", "five",
        "six", "seven", "eight", "nine"
    ]
    teens = [
        "ten", "eleven", "twelve", "thirteen", "fourteen",
        "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"
    ]
    tens = ["", "", "twenty", "thirty", "forty", "fifty"]

    if num < 10:
        return ones[num]
    elif num < 20:
        return teens[num - 10]
    elif num < 60:
        ten, one = divmod(num, 10)
        return f"{tens[ten]} {ones[one]}".strip()
    return str(num)


def number_to_words_uz(num: int) -> str:
    ones = [
        "nol", "bir", "ikki", "uch", "to‚Äòrt", "besh",
        "olti", "yetti", "sakkiz", "to‚Äòqqiz"
    ]
    tens = ["", "o‚Äòn", "yigirma", "o‚Äòttiz", "qirq", "ellik"]

    if num < 10:
        return ones[num]
    elif num < 20:
        return "o‚Äòn " + ones[num - 10]
    elif num < 60:
        ten, one = divmod(num, 10)
        return f"{tens[ten]} {ones[one]}".strip()
    return str(num)


# === üìÖ –ú–µ—Å—è—Ü—ã –∏ –≥–æ–¥—ã ===
MONTHS = {
    "ru": {
        "January": "—è–Ω–≤–∞—Ä—è", "February": "—Ñ–µ–≤—Ä–∞–ª—è", "March": "–º–∞—Ä—Ç–∞",
        "April": "–∞–ø—Ä–µ–ª—è", "May": "–º–∞—è", "June": "–∏—é–Ω—è",
        "July": "–∏—é–ª—è", "August": "–∞–≤–≥—É—Å—Ç–∞", "September": "—Å–µ–Ω—Ç—è–±—Ä—è",
        "October": "–æ–∫—Ç—è–±—Ä—è", "November": "–Ω–æ—è–±—Ä—è", "December": "–¥–µ–∫–∞–±—Ä—è"
    },
    "en": {
        "January": "January", "February": "February", "March": "March",
        "April": "April", "May": "May", "June": "June",
        "July": "July", "August": "August", "September": "September",
        "October": "October", "November": "November", "December": "December"
    },
    "uz": {
        "January": "yanvar", "February": "fevral", "March": "mart",
        "April": "aprel", "May": "may", "June": "iyun",
        "July": "iyul", "August": "avgust", "September": "sentyabr",
        "October": "oktyabr", "November": "noyabr", "December": "dekabr"
    }
}


# === üóìÔ∏è –ì–æ–¥ –ø—Ä–æ–ø–∏—Å—å—é ===
def year_to_words_ru(year: int) -> str:
    thousands = {
        1000: "–æ–¥–Ω–∞ —Ç—ã—Å—è—á–∞",
        2000: "–¥–≤–µ —Ç—ã—Å—è—á–∏"
    }
    if year < 2000:
        return f"{thousands.get(1000)} {number_to_words_ru(year - 1000)}"
    elif 2000 <= year < 2100:
        remainder = year - 2000
        if remainder == 0:
            return "–¥–≤–µ —Ç—ã—Å—è—á–∏"
        return f"–¥–≤–µ —Ç—ã—Å—è—á–∏ {number_to_words_ru(remainder)}"
    return str(year)


def year_to_words_en(year: int) -> str:
    if 2000 <= year < 2100:
        remainder = year - 2000
        if remainder == 0:
            return "two thousand"
        elif remainder < 10:
            return f"two thousand and {number_to_words_en(remainder)}"
        else:
            return f"two thousand {number_to_words_en(remainder)}"
    return str(year)


def year_to_words_uz(year: int) -> str:
    if 2000 <= year < 2100:
        remainder = year - 2000
        if remainder == 0:
            return "ikki ming"
        else:
            return f"ikki ming {number_to_words_uz(remainder)}"
    return str(year)


# === üïí –í—Ä–µ–º—è ===
def get_time(*args, **kwargs):
    lang = kwargs.get("lang", "ru").lower()
    now = datetime.now()
    hour, minute = now.hour, now.minute

    if lang == "ru":
        return f"–°–µ–π—á–∞—Å {number_to_words_ru(hour)} {get_hour_word_ru(hour)}, {number_to_words_ru(minute)} {get_minute_word_ru(minute)}."
    elif lang == "en":
        return f"The time is {number_to_words_en(hour)} {get_hour_word_en(hour)} and {number_to_words_en(minute)} {get_minute_word_en(minute)}."
    elif lang == "uz":
        return f"Hozir soat {number_to_words_uz(hour)} {get_hour_word_uz(hour)} va {number_to_words_uz(minute)} {get_minute_word_uz(minute)}."
    else:
        return f"{hour:02d}:{minute:02d}"


# === üìÖ –ü–æ–ª–Ω–∞—è –¥–∞—Ç–∞ ===
def get_date(*args, **kwargs):
    lang = kwargs.get("lang", "ru").lower()
    now = datetime.now()
    day, year = now.day, now.year
    month_en = now.strftime("%B")

    if lang == "ru":
        return f"–°–µ–≥–æ–¥–Ω—è {number_to_words_ru(day)} {MONTHS['ru'][month_en]} {year_to_words_ru(year)} –≥–æ–¥–∞."
    elif lang == "en":
        return f"Today is {MONTHS['en'][month_en]} {number_to_words_en(day)}, {year_to_words_en(year)}."
    elif lang == "uz":
        return f"Bugun {number_to_words_uz(day)} {MONTHS['uz'][month_en]} {year_to_words_uz(year)} yil."
    else:
        return now.strftime("%Y-%m-%d")


# === üó£Ô∏è –°–∫–ª–æ–Ω–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º—ã ===
def get_hour_word_ru(hour: int) -> str:
    if hour % 10 == 1 and hour != 11:
        return "—á–∞—Å"
    elif 2 <= hour % 10 <= 4 and not 12 <= hour <= 14:
        return "—á–∞—Å–∞"
    return "—á–∞—Å–æ–≤"


def get_minute_word_ru(minute: int) -> str:
    if minute % 10 == 1 and minute != 11:
        return "–º–∏–Ω—É—Ç–∞"
    elif 2 <= minute % 10 <= 4 and not 12 <= minute <= 14:
        return "–º–∏–Ω—É—Ç—ã"
    return "–º–∏–Ω—É—Ç"


def get_hour_word_en(hour: int) -> str:
    return "hour" if hour == 1 else "hours"


def get_minute_word_en(minute: int) -> str:
    return "minute" if minute == 1 else "minutes"


def get_hour_word_uz(hour: int) -> str:
    return "soat"


def get_minute_word_uz(minute: int) -> str:
    return "daqiqa"
