import time
import re
import threading
import queue
import speech_recognition as sr
import logging
from pathlib import Path

from src.core.recognizer import Recognizer
from src.core.tts import HybridTTS
from src.core.skill_manager import SkillManager
from src.core.executor import Executor
from src.core.config import get_settings

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è =====
logging.basicConfig(
    level=logging.INFO,
    format="[%(asctime)s] [%(levelname)s] %(message)s",
    datefmt="%H:%M:%S"
)
logger = logging.getLogger("Assistant")

tts_queue = queue.Queue()
recognizer_queue = queue.Queue()

def tts_worker(tts: HybridTTS):
    while True:
        text, lang = tts_queue.get()
        try:
            if text:
                tts.speak(text, lang)
        except Exception as e:
            logger.error(f"[TTS ERROR] {e}")
        finally:
            tts_queue.task_done()

def listen_loop(recognizer: Recognizer):
    while True:
        try:
            result = recognizer.listen_text(multilang=True)
            if result:
                recognizer_queue.put(result)
        except Exception as e:
            logger.error(f"[Recognizer ERROR] {e}")
            time.sleep(0.5)

def clean_text(text: str, wake_word: str) -> str:
    """–£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ü–µ–ª–∏–∫–æ–º)."""
    if not text: return ""
    pattern = r"(^|\b)" + re.escape(wake_word) + r"(\b|$)"
    return re.sub(pattern, "", text.lower(), flags=re.IGNORECASE).strip()

def is_reload_command(text: str, meta: dict, key: str) -> bool:
    if not text or not meta: return False
    patterns = meta.get(key, {}).get("patterns", [])
    return any(text == p.lower() for p in patterns)

def main():
    settings = get_settings()
    config = settings.config
    dataset = settings.dataset

    recognizer = Recognizer(config)
    tts = HybridTTS(config)
    skills = SkillManager(debug=config.get("debug", False))
    executor = Executor(dataset, skills, config=config)

    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ-—Ñ–∞–π–ª, –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –µ–≥–æ
    try:
        greet_path = Path("data/media/audios/greeting.wav")
        if greet_path.exists():
            tts.play_audio_file(greet_path)
    except Exception:
        pass

    wake_word = config.get("wake_word", "–¥–∂–∞—Ä–≤–∏—Å").lower().strip()
    active_mode = False
    last_activation = 0
    active_duration = 15  # —Å–µ–∫—É–Ω–¥

    threading.Thread(target=tts_worker, args=(tts,), daemon=True).start()
    threading.Thread(target=listen_loop, args=(recognizer,), daemon=True).start()

    logger.info(f"üéß –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤! –°–ª–æ–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: '{wake_word}'.\n")
    while True:
        try:
            try:
                result = recognizer_queue.get_nowait()
            except queue.Empty:
                time.sleep(0.1)
                continue

            if not result:
                continue
            text, lang = result
            normalized = text.lower().strip()
            logger.info(f"üß† –°–∫–∞–∑–∞–Ω–æ ({lang}): {text}")

            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
            if not active_mode:
                if wake_word in normalized:
                    active_mode = True
                    last_activation = time.time()
                    logger.info("üöÄ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
                    # –ì–æ–≤–æ—Ä–∏–º –æ—Ç–≤–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                    tts_queue.put(("–°–ª—É—à–∞—é –≤–∞—Å.", lang))
                    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Å–ª–æ–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
                    cleaned = clean_text(normalized, wake_word)
                    if cleaned:
                        response = executor.handle(cleaned, lang=lang)
                        if response:
                            logger.info(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
                            tts_queue.put((response, lang))
                    continue
                else:
                    continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º-–∞—É—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if time.time() - last_activation > active_duration:
                logger.info("üò¥ –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å—Ç–µ–∫–ª–æ. –ñ–¥—ë–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.")
                active_mode = False
                continue

            # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (—É–¥–∞–ª—è–µ–º wake-word, –µ—Å–ª–∏ —Å–∫–∞–∑–∞–Ω–æ)
            cleaned_text = clean_text(normalized, wake_word)
            if not cleaned_text:
                tts_queue.put(("–î–∞, —è —Å–ª—É—à–∞—é.", lang))
                continue

            meta = dataset.get("meta", {}) or {}

            # –ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
            if is_reload_command(cleaned_text, meta, "reload_dataset"):
                settings = get_settings()  # –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏ –¥–∞—Ç–∞—Å–µ—Ç
                dataset = settings.dataset
                executor.update_dataset(dataset)
                skills.reload()
                msg = meta.get("reload_dataset", {}).get("response", {}).get(lang, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                logger.info(msg)
                tts_queue.put((msg, lang))
                continue

            # –ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–≤—ã–∫–æ–≤
            if is_reload_command(cleaned_text, meta, "restart_skills"):
                skills.reload()
                msg = meta.get("restart_skills", {}).get("response", {}).get(lang, "–ù–∞–≤—ã–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã.")
                logger.info(msg)
                tts_queue.put((msg, lang))
                continue

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
            response = executor.handle(cleaned_text, lang=lang)
            if response:
                logger.info(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response}")
                tts_queue.put((response, lang))
            else:
                tts_queue.put(("–ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.", lang))

        except KeyboardInterrupt:
            logger.info("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
            break
        except Exception as e:
            logger.error(f"[MAIN ERROR] {e}")
            time.sleep(0.3)
            continue

if __name__ == "__main__":
    main()
