from src.core.config_loader import load_config
from src.core.dataset_loader import load_dataset
from src.core.recognizer import Recognizer
from src.core.tts import HybridTTS
from src.core.skill_manager import SkillManager
from src.core.executor import Executor
import time
import re
import traceback
import speech_recognition as sr  # –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ WaitTimeoutError


def clean_text(text: str, wake_word: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã."""
    if not text:
        return ""
    pattern = r"(^|\b)" + re.escape(wake_word) + r"(\b|$)"
    return re.sub(pattern, "", text.lower(), flags=re.IGNORECASE).strip()


def is_reload_command(text: str, meta: dict, key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–ª—É–∂–µ–±–Ω–æ–π."""
    if not text or not meta:
        return False
    patterns = meta.get(key, {}).get("patterns", [])
    return any(text == p.lower() for p in patterns)


def main():
    # === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
    config = load_config("data/config.yaml")
    dataset = load_dataset("data/commands.yaml")

    recognizer = Recognizer(config)
    tts = HybridTTS(config)
    skills = SkillManager(debug=config.get("debug", False))
    executor = Executor(dataset, skills, config=config)

    wake_word = config.get("wake_word", "–¥–∂–∞—Ä–≤–∏—Å").lower().strip()
    active_mode = False
    last_activation = 0
    active_duration = 15  # —Å–µ–∫—É–Ω–¥

    print(f"üéß Voice Assistant is ready! Say '{wake_word.title()}' to activate.\n")

    while True:
        try:
            try:
                result = recognizer.listen_text(multilang=True)
            except sr.WaitTimeoutError:
                # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç
                continue

            if not result:
                continue

            text, lang = (result if isinstance(result, tuple)
                          else (result, config.get("assistant", {}).get("default_language", "ru")))

            normalized = text.lower().strip()
            print(f"üß† You said ({lang}): {text}")

            # === 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ===
            if not active_mode:
                if wake_word in normalized:
                    active_mode = True
                    last_activation = time.time()
                    print("üöÄ Wake word detected! Assistant activated.")
                    tts.speak("–°–ª—É—à–∞—é –≤–∞—Å.", lang=lang)

                    cleaned = clean_text(normalized, wake_word)
                    if cleaned:
                        response = executor.handle(cleaned, lang=lang)
                        print(f"ü§ñ Assistant: {response}")
                        tts.speak(response, lang=lang)
                    continue
                else:
                    continue

            # === 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
            if time.time() - last_activation > active_duration:
                print("üò¥ –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ. –û–∂–∏–¥–∞—é —Å–ª–æ–≤–æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è...")
                active_mode = False
                continue

            # === 3. –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ===
            cleaned_text = clean_text(normalized, wake_word)
            if not cleaned_text:
                tts.speak("–î–∞, —è –≤–∞—Å —Å–ª—É—à–∞—é.", lang=lang)
                continue

            # === 4. –ì–æ—Ä—è—á–∏–µ –∫–æ–º–∞–Ω–¥—ã ===
            meta = dataset.get("meta", {}) or {}

            if is_reload_command(cleaned_text, meta, "reload_dataset"):
                dataset = load_dataset("data/commands.yaml")
                executor.update_dataset(dataset)
                skills.reload()
                msg = meta.get("reload_dataset", {}).get("response", {}).get(lang, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                print(msg)
                tts.speak(msg, lang=lang)
                continue

            if is_reload_command(cleaned_text, meta, "restart_skills"):
                skills.reload()
                msg = meta.get("restart_skills", {}).get("response", {}).get(lang, "–ù–∞–≤—ã–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã.")
                print(msg)
                tts.speak(msg, lang=lang)
                continue

            # === 5. –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ===
            response = executor.handle(cleaned_text, lang=lang)
            if response:
                print(f"ü§ñ Assistant: {response}")
                tts.speak(response, lang=lang)
            else:
                tts.speak("–ù–µ –ø–æ–Ω—è–ª, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.", lang=lang)

        except KeyboardInterrupt:
            print("\nüõë Exiting...")
            break

        except Exception as e:
            # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            print(f"[ERROR main] {e}")
            print(traceback.format_exc())
            # –ù–µ –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞–µ–º TTS –ø—Ä–∏ —Ç–∏—Ö–∏—Ö —Å–±–æ—è—Ö
            time.sleep(0.3)
            continue


if __name__ == "__main__":
    main()
